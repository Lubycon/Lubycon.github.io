{"version":3,"sources":["webpack:///./src/pages/blogs.js"],"names":["parser","RSSParser","Blogs","_useState","useState","feeds","setFeeds","_useState2","isFetched","setIsFetched","useEffect","_fetchFeeds","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default","a","mark","_callee","hasRSSMembers","jobs","response","allFeeds","wrap","_context","prev","next","Members","filter","member","rss","map","parseURL","CORS_PROXY","Promise","all","sent","forEach","feed","index","items","item","author","reduce","concat","_toConsumableArray","sort","b","Date","pubDate","t0","Error","stop","apply","this","arguments","window","fetchFeeds","react__WEBPACK_IMPORTED_MODULE_15___default","createElement","layout_page__WEBPACK_IMPORTED_MODULE_16__","pageName","components_seo__WEBPACK_IMPORTED_MODULE_17__","title","react_bootstrap__WEBPACK_IMPORTED_MODULE_20__","react_bootstrap__WEBPACK_IMPORTED_MODULE_21__","id","react_bootstrap__WEBPACK_IMPORTED_MODULE_22__","key","xs","sm","md","lg","href","link","target","rel","react_bootstrap__WEBPACK_IMPORTED_MODULE_23__","className","Body","Title","Subtitle","src","profileImg","alt","name","Text","contentSnippet","substring","data-name","distanceInWordsToNow","addSuffix","locale","koLocale"],"mappings":"4xBAUA,IAAMA,EAAS,IAAIC,IAiEJC,UAhED,WAAM,IAAAC,EACUC,mBAAS,IAA7BC,EADUF,EAAA,GACHG,EADGH,EAAA,GAAAI,EAEkBH,oBAAS,GAArCI,EAFUD,EAAA,GAECE,EAFDF,EAAA,GA+BlB,OA3BAG,oBAAU,WAAM,SAAAC,UAAA,SAAAC,EAAAC,EAAAC,KAId,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEUN,EAAgBQ,IAAQC,OAAO,SAAAC,GAAM,OAAIA,EAAOC,MAChDV,EAAOD,EAAcY,IAAI,SAAAF,GAAM,OAAI1B,EAAO6B,SAASC,IAAaJ,EAAOC,OAHjFN,EAAAE,KAAA,EAI2BQ,QAAQC,IAAIf,GAJvC,QAIUC,EAJVG,EAAAY,MAKaC,QAAQ,SAACC,EAAMC,GACtBD,EAAKE,MAAMH,QAAQ,SAAAI,GACjBA,EAAKC,OAASvB,EAAcoB,OAG1BjB,EAAWD,EACdsB,OAAO,SAAClB,EAAMK,GAAP,SAAAc,OAAAC,EAAmBpB,GAAnBoB,EAA4Bf,EAAIU,SAAQ,IAC/CM,KAAK,SAAC9B,EAAG+B,GAAJ,OAAU,IAAIC,KAAKD,EAAEE,SAAW,IAAID,KAAKhC,EAAEiC,WACnDxC,EAASa,GACTV,GAAa,GAdjBY,EAAAE,KAAA,uBAAAF,EAAAC,KAAA,GAAAD,EAAA0B,GAAA1B,EAAA,SAiBU,IAAI2B,MAAJ3B,EAAA0B,IAjBV,yBAAA1B,EAAA4B,SAAAlC,EAAA,kBAJcJ,+KAAAuC,MAAAC,KAAAC,WACQ,oBAAXC,QADG,WAAA1C,EAAAuC,MAAAC,KAAAC,WAwBdE,IACC,IAGDC,EAAA1C,EAAA2C,cAACC,EAAA,EAAD,CAAMC,SAAS,SACbH,EAAA1C,EAAA2C,cAACG,EAAA,EAAD,CAAKC,MAAM,UACXL,EAAA1C,EAAA2C,cAACK,EAAA,EAAD,KACEN,EAAA1C,EAAA2C,cAAA,mBACAD,EAAA1C,EAAA2C,cAAA,0CACChD,EAAY,KAAO+C,EAAA1C,EAAA2C,cAAA,4BACpBD,EAAA1C,EAAA2C,cAACM,EAAA,EAAD,CAAKC,GAAG,oBACL1D,EAAMuB,IAAI,SAACO,EAAMC,GAChB,OACEmB,EAAA1C,EAAA2C,cAACQ,EAAA,EAAD,CAAKC,IAAK7B,EAAO8B,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzCd,EAAA1C,EAAA2C,cAAA,KAAGc,KAAMnC,EAAKoC,KAAMC,OAAO,SAASC,IAAI,uBACtClB,EAAA1C,EAAA2C,cAACkB,EAAA,EAAD,CAAMC,UAAU,iBACdpB,EAAA1C,EAAA2C,cAACkB,EAAA,EAAKE,KAAN,KACErB,EAAA1C,EAAA2C,cAACkB,EAAA,EAAKG,MAAN,KAAa1C,EAAKyB,OAClBL,EAAA1C,EAAA2C,cAACkB,EAAA,EAAKI,SAAN,CAAeH,UAAU,cACvBpB,EAAA1C,EAAA2C,cAAA,OAAKuB,IAAK5C,EAAKI,OAAOyC,WAAYC,IAAK9C,EAAKI,OAAO2C,OAClD/C,EAAKI,OAAO2C,MAEf3B,EAAA1C,EAAA2C,cAACkB,EAAA,EAAKS,KAAN,KAAYhD,EAAKiD,eAAeC,UAAU,EAAG,KAAO,OACpD9B,EAAA1C,EAAA2C,cAAA,KAAG8B,YAAU,iBAAiBC,+BAAqBpD,EAAKW,QAAS,CAAE0C,WAAW,EAAMC,OAAQC","file":"component---src-pages-blogs-js-5ea6104aa6d0e6ff4d41.js","sourcesContent":["import './blogs.scss';\nimport React, { useState, useEffect } from 'react';\nimport Page from 'layout/page';\nimport SEO from 'components/seo';\nimport RSSParser from 'rss-parser';\nimport { Members, CORS_PROXY } from 'src/constants';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { distanceInWordsToNow } from 'date-fns';\nimport koLocale from 'date-fns/locale/ko';\n\nconst parser = new RSSParser();\nconst Blogs = () => {\n  const [ feeds, setFeeds ] = useState([]);\n  const [ isFetched, setIsFetched ] = useState(false);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') {\n      return;\n    }\n    async function fetchFeeds () {\n      try {\n        const hasRSSMembers = Members.filter(member => member.rss);\n        const jobs = hasRSSMembers.map(member => parser.parseURL(CORS_PROXY + member.rss));\n        const response = await Promise.all(jobs);\n        response.forEach((feed, index) => {\n          feed.items.forEach(item => {\n            item.author = hasRSSMembers[index];\n          });\n        });\n        const allFeeds = response\n          .reduce((prev, rss) => [...prev, ...rss.items], [])\n          .sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));\n        setFeeds(allFeeds);\n        setIsFetched(true);\n      }\n      catch (e) {\n        throw new Error(e);\n      }\n    }\n    fetchFeeds();\n  }, []);\n\n  return (\n    <Page pageName=\"blogs\">\n      <SEO title=\"Blogs\" />\n      <Container>\n        <h1>Blogs</h1>\n        <p>루비콘 멤버들의 개인 블로그에 업데이트 되는 포스팅들</p>\n        {isFetched ? null : <div>RSS 피드 로딩중...</div>}\n        <Row id=\"member-blog-list\">\n          {feeds.map((feed, index) => {\n            return (\n              <Col key={index} xs={12} sm={6} md={4} lg={3}>\n                <a href={feed.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <Card className=\"contents-card\">\n                    <Card.Body>\n                      <Card.Title>{feed.title}</Card.Title>\n                      <Card.Subtitle className=\"text-muted\">\n                        <img src={feed.author.profileImg} alt={feed.author.name}/>\n                        {feed.author.name}\n                      </Card.Subtitle>\n                      <Card.Text>{feed.contentSnippet.substring(0, 100) + '...'}</Card.Text>\n                      <p data-name=\"publishedDate\">{distanceInWordsToNow(feed.pubDate, { addSuffix: true, locale: koLocale })}</p>\n                    </Card.Body>\n                  </Card>\n                </a>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </Page>\n  );\n}\n\nexport default Blogs;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/components/BlogFeedCard.tsx","webpack:///./src/components/Loading.tsx","webpack:///./src/pages/blogs.tsx"],"names":["BlogFeedCard","_ref","link","title","authorProfile","authorName","content","pubDate","ellipsedContent","useMemo","substring","publishedDate","distanceInWordsToNow","addSuffix","locale","koLocale","Object","core_browser_esm","href","target","rel","Card","Body","Title","Subtitle","className","src","alt","Text","css","_templateObject","rippleKeyframe","keyframes","_templateObject3","Wrapper","styled","div","_templateObject4","_ref2","size","_ref3","Circle","_templateObject5","_ref4","color","Loading","_ref$size","_ref$text","text","_ref$color","Color","BlueGrey500","Loading_templateObject","_templateObject2","BlueGrey800","Blogs","_useBlogFeeds","useBlogFeeds","feeds","isFetched","Page","pageName","description","Container","components_Loading","Row","map","feed","index","Col","key","xs","sm","md","lg","components_BlogFeedCard","author","profileImg","name","contentSnippet"],"mappings":"8ZAeA,IAyCeA,EAzCM,SAAAC,GAOR,IANXC,EAMWD,EANXC,KACAC,EAKWF,EALXE,MACAC,EAIWH,EAJXG,cACAC,EAGWJ,EAHXI,WACAC,EAEWL,EAFXK,QACAC,EACWN,EADXM,QAEMC,EAAkBC,kBAAQ,WAC9B,OAAUH,EAAQI,UAAU,EAAG,KAA/B,OACC,IACGC,EAAgBF,kBAAQ,WAC5B,OAAOG,+BAAqBL,EAAS,CACnCM,WAAW,EACXC,OAAQC,OAET,IAEH,OACEC,OAAAC,EAAA,EAAAD,CAAA,KAAGE,KAAMhB,EAAMiB,OAAO,SAASC,IAAI,uBACjCJ,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAD,KACEL,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAKC,KAAN,KACEN,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAKE,MAAN,KAAapB,GACba,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAKG,SAAN,CAAeC,UAAU,cACvBT,OAAAC,EAAA,EAAAD,CAAA,OAAKU,IAAKtB,EAAeuB,IAAKtB,IAC7BA,GAEHW,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAKO,KAAN,KAAYpB,GACZQ,OAAAC,EAAA,EAAAD,CAAA,KAAGa,IAAKA,YAAFC,MAKHnB,48BCtCb,IAuBMoB,EAAiBC,YAAHC,KAiBdC,EAAUC,IAAOC,IAAVC,IACF,SAAAC,GAAA,OAAAA,EAAGC,MACF,SAAAC,GAAA,OAAAA,EAAGD,OAITE,EAASN,IAAOC,IAAVM,IAEU,SAAAC,GAAA,OAAAA,EAAGC,OAGVb,GAMAc,EAzDC,SAAA5C,GAAgE,IAAA6C,EAAA7C,EAA7DsC,YAA6D,IAAAO,EAAtD,GAAsDA,EAAAC,EAAA9C,EAAlD+C,YAAkD,IAAAD,EAA3C,GAA2CA,EAAAE,EAAAhD,EAAvC2C,aAAuC,IAAAK,EAA/BC,IAAMC,YAAyBF,EAC9E,OACEjC,OAAAC,EAAA,EAAAD,CAAA,OAAKa,IAAKA,YAAFuB,MAGNpC,OAAAC,EAAA,EAAAD,CAACkB,EAAD,CAASK,KAAMA,GACbvB,OAAAC,EAAA,EAAAD,CAACyB,EAAD,CAAQG,MAAOA,IACf5B,OAAAC,EAAA,EAAAD,CAACyB,EAAD,CAAQG,MAAOA,KAEhBI,GACChC,OAAAC,EAAA,EAAAD,CAAA,KAAGa,IAAKA,YAAFwB,IAGKH,IAAMI,cAEdN,KCcIO,UA/BD,WAAM,IAAAC,EACWC,cAArBC,EADUF,EACVE,MAAOC,EADGH,EACHG,UAEf,OACE3C,OAAAC,EAAA,EAAAD,CAAC4C,EAAA,EAAD,CACEC,SAAS,QACTC,YAAY,iCAEZ9C,OAAAC,EAAA,EAAAD,CAAC+C,EAAA,EAAD,KACGJ,EAAY,KAAO3C,OAAAC,EAAA,EAAAD,CAACgD,EAAD,CAAShB,KAAK,oCAClChC,OAAAC,EAAA,EAAAD,CAACiD,EAAA,EAAD,KACGP,EAAMQ,IAAI,SAACC,EAAMC,GAChB,OACEpD,OAAAC,EAAA,EAAAD,CAACqD,EAAA,EAAD,CAAKC,IAAKF,EAAOG,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzC1D,OAAAC,EAAA,EAAAD,CAAC2D,EAAD,CACExE,MAAOgE,EAAKhE,MACZD,KAAMiE,EAAKjE,KACXE,cAAe+D,EAAKS,OAAOC,WAC3BxE,WAAY8D,EAAKS,OAAOE,KACxBxE,QAAS6D,EAAKY,eACdxE,QAAS4D,EAAK5D","file":"component---src-pages-blogs-tsx-862069e5aeb799d56ffe.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { useMemo } from 'react';\nimport { distanceInWordsToNow } from 'date-fns';\nimport koLocale from 'date-fns/locale/ko';\nimport Card from 'src/components/Card';\n\ninterface Props {\n  link: string;\n  title: string;\n  authorProfile: string;\n  authorName: string;\n  content: string;\n  pubDate: string;\n}\nconst BlogFeedCard = ({\n  link,\n  title,\n  authorProfile,\n  authorName,\n  content,\n  pubDate\n}: Props) => {\n  const ellipsedContent = useMemo(() => {\n    return `${content.substring(0, 100)}...`;\n  }, []);\n  const publishedDate = useMemo(() => {\n    return distanceInWordsToNow(pubDate, {\n      addSuffix: true,\n      locale: koLocale,\n    })\n  }, []);\n\n  return (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Card>\n        <Card.Body>\n          <Card.Title>{title}</Card.Title>\n          <Card.Subtitle className=\"text-muted\">\n            <img src={authorProfile} alt={authorName}/>\n            {authorName}\n          </Card.Subtitle>\n          <Card.Text>{ellipsedContent}</Card.Text>\n          <p css={css`\n            text-align: right;\n            font-size: .6rem;\n            margin: 0;\n          `}>\n            {publishedDate}\n          </p>\n        </Card.Body>\n      </Card>\n    </a>\n  );\n}\n\nexport default BlogFeedCard;","/** @jsx jsx */\nimport { jsx, css, keyframes } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { Color } from 'src/constants';\n\ninterface Props {\n  size?: number;\n  color?: Color;\n  text?: string;\n}\nconst Loading = ({ size = 80, text = '', color = Color.BlueGrey500 }: Props) => {\n  return (\n    <div css={css`\n      text-align: center;\n    `}>\n      <Wrapper size={size}>\n        <Circle color={color} />\n        <Circle color={color} />\n      </Wrapper>\n      {text && (\n        <p css={css`\n          font-size: .8rem;\n          margin: 0;\n          color: ${Color.BlueGrey800};\n        `}>\n          {text}\n        </p>\n      )}\n    </div>\n    \n  );\n};\n\nconst rippleKeyframe = keyframes`\n  0% {\n    top: 36px;\n    left: 36px;\n    width: 0;\n    height: 0;\n    opacity: 1;\n  }\n  100% {\n    top: 0px;\n    left: 0px;\n    width: 72px;\n    height: 72px;\n    opacity: 0;\n  }\n}`;\n\nconst Wrapper = styled.div<{ size: number }>`\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  position: relative;\n  display: inline-block;\n`;\nconst Circle = styled.div<{ color: Color }>`\n  position: absolute;\n  border: 4px solid ${({ color }) => color};\n  opacity: 1;\n  border-radius: 50%;\n  animation: ${rippleKeyframe} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  &:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n`;\n\nexport default Loading;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport Page from 'src/layout/Page';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useBlogFeeds } from 'src/hooks';\nimport BlogFeedCard from 'components/BlogFeedCard';\nimport Loading from 'components/Loading';\n\nconst Blogs = () => {\n  const { feeds, isFetched } = useBlogFeeds();\n\n  return (\n    <Page\n      pageName=\"Blogs\"\n      description=\"루비콘 멤버들의 개인 블로그에 업데이트 되는 포스팅들\"\n    >\n      <Container>\n        {isFetched ? null : <Loading text=\"루비콘 멤버들의 블로그 포스팅을 불러오는 중 입니다...\" />}\n        <Row>\n          {feeds.map((feed, index) => {\n            return (\n              <Col key={index} xs={12} sm={6} md={4} lg={3}>\n                <BlogFeedCard\n                  title={feed.title}\n                  link={feed.link}\n                  authorProfile={feed.author.profileImg}\n                  authorName={feed.author.name}\n                  content={feed.contentSnippet}\n                  pubDate={feed.pubDate}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </Page>\n  );\n}\n\nexport default Blogs;\n"],"sourceRoot":""}